package maidsafe.priv.protobuf;

// All following messages are serialised into the payload field, and the message type added.
message WrapperMessage {
  required int32 msg_type = 1;
  required bytes payload = 2;
  optional bytes message_signature = 3;
}

// VaultManager receives this from a Client looking for the correct port and responds with this.
message Ping {
  optional bytes ping = 1;
}

// VaultManager receives this from Client and it will then start a vault.  The new vault will send a
// VaultIdentityRequest to the VaultManager which will trigger the StartVaultResponse in reply to
// this message.
message StartVaultRequest {
  required bytes account_name = 1;
  required bytes keys = 2;
  optional bytes bootstrap_endpoint = 3;
}

// VaultManager sends this in response to a StartVaultRequest. It details whether or not the
// starting of the vault was successful.
message StartVaultResponse {
  required bool result = 1;
}

// VaultManager receives this from Vault. Vault expects a VaultIdentityResponse.
message VaultIdentityRequest {
  required uint32 process_index = 1;  // as assigned by ProcessManager
}

// VaultManager sends this to a requesting Vault. It contains the identity that the Vault can assume.
message VaultIdentityResponse {
  required bytes account_name = 1;
  required bytes keys = 2;
}

// VaultManager receives this periodically from Vault (polling to see whether to keep running).
//  Vault expects a VaultShutdownResponse.
message VaultShutdownQuery {
  required uint32 process_index = 1;  // as assigned by ProcessManager
}

// VaultManager sends this to a requesting Vault. It contains a boolean incdicating whether or not
// the vault should shut down.
message VaultShutdownResponse {
  required bool shutdown = 1;
}

// TODO(Fraser#5#): 2012-08-12 - Add Setter and getter RPCs for update interval
