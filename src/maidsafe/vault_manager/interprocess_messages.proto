/*  Copyright 2012 MaidSafe.net limited

    This MaidSafe Software is licensed to you under (1) the MaidSafe.net Commercial License,
    version 1.0 or later, or (2) The General Public License (GPL), version 3, depending on which
    licence you accepted on initial access to the Software (the "Licences").

    By contributing code to the MaidSafe Software, or to this project generally, you agree to be
    bound by the terms of the MaidSafe Contributor Agreement, version 1.0, found in the root
    directory of this project at LICENSE, COPYING and CONTRIBUTOR respectively and also
    available at: http://www.maidsafe.net/licenses

    Unless required by applicable law or agreed to in writing, the MaidSafe Software distributed
    under the GPL Licence is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
    OF ANY KIND, either express or implied.

    See the Licences for the specific language governing permissions and limitations relating to
    use of the MaidSafe Software.                                                                 */

package maidsafe.vault_manager.protobuf;

// All following messages are serialised into the payload field, and the message type added.
message WrapperMessage {
  required int32 type = 1;
  optional bytes payload = 2;
  optional bytes message_signature = 3;
}

// VaultManager to Client
message Challenge {
  required bytes plaintext = 1;
}

// Client to VaultManager
message ChallengeResponse {
  required bytes public_maid_name = 1;
  required bytes public_maid_value = 2;
  required bytes signature = 3;
}

// Client to VaultManager
// VaultManager starts a vault.  The new vault will send a VaultStarted to the VaultManager which
// will trigger the StartVaultResponse in reply this message.
message StartVaultRequest {
  required bytes label = 1;
  required bytes chunkstore_path = 2;
  required uint64 max_disk_usage = 3;
}

// Client to VaultManager
message TakeOwnershipRequest {
  required bytes label = 1;
  required bytes chunkstore_path = 2;
  required uint64 max_disk_usage = 3;
}

// VaultManager to Client
message VaultRunningResponse {
  message VaultKeys {
    required bytes label = 1;
    required bytes AES256Key = 2;
    required bytes AES256IV = 3;
    required bytes encrypted_anpmid = 4;
    required bytes encrypted_pmid = 5;
  }
  optional bytes serialised_maidsafe_error = 1;
  optional VaultKeys vault_keys = 2;
}

// Vault to VaultManager
message VaultStarted {
  required uint64 process_id = 1;
}

// VaultManager to Vault
message VaultStartedResponse {
  required bytes AES256Key = 1;
  required bytes AES256IV = 2;
  required bytes encrypted_pmid = 3;
  required bytes chunkstore_path = 4;
  required uint64 max_disk_usage = 5;
  required bytes serialised_bootstrap_contacts = 6;
}

// Client to VaultManager and VaultManager to Vault
message MaxDiskUsageUpdate {
  required uint64 max_disk_usage = 1;
}











// VaultManager receives this from Vault once it has joined or failed to join the network and
// replies with the VaultJoinedNetworkAck.
message VaultJoinedNetwork {
  required uint32 process_index = 1;  // as assigned by ProcessManager
  required bool joined = 2;
}

message VaultJoinedNetworkAck {
  required bool ack = 1;
}

// Client receives this from VaultManager once Vault has joined or failed to join the network and
// Client replies with the VaultJoinConfirmationAck.
message VaultJoinConfirmation {
  required bytes identity = 1;
  required bool joined = 2;
}

message VaultJoinConfirmationAck {
  required bool ack = 1;
}

// Vault sends this to VaultManager when it discovers a suitable bootstrap node.
// VaultManager replies with the SendEndpointToVaultManagerResponse.
message SendEndpointToVaultManagerRequest {
  required bytes bootstrap_endpoint_ip = 4;
  required uint32 bootstrap_endpoint_port = 5;
}

message SendEndpointToVaultManagerResponse {
  required bool result = 1;
}

// VaultManager receives this from Client and it will then stop vault with pmid.identity==identity
message StopVaultRequest {
  required bytes data = 1;
  required bytes signature = 2;
  required bytes identity = 3;
}

// VaultManager sends this in response to a StopVaultRequest. It details whether or not the
// stopping of the vault was successful.
message StopVaultResponse {
  required bool result = 1;
}

// Client sends this to VaultManager.  If the new_update_interval is set, the request is a setter,
// otherwise it's a getter.
message UpdateIntervalRequest {
  optional uint32 new_update_interval = 1;  // In seconds.
}

// VaultManager sends this to a requesting Client indicating current update interval in seconds.
message UpdateIntervalResponse {
  required uint32 update_interval = 1;  // In seconds.
}

// VaultManager sends this to Clients when a new version of the Client executable is available.
message NewVersionAvailable {
  required bytes new_version_filepath = 1;
}

// Client acknowledges NewVersionAvailable by replying with the same new_version_filepath that was
// passed in the NewVersionAvailable message.
message NewVersionAvailableAck {
  required bytes new_version_filepath = 1;
}

message BootstrapRequest {
  required uint32 message_id = 1;
}

message BootstrapResponse {
  repeated bytes bootstrap_endpoint_ip = 1;
  repeated uint32 bootstrap_endpoint_port = 2;
}
